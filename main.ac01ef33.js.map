{"version":3,"sources":["scripts/main.js"],"names":["game","boardSize","blocks","score","startGame","generateInitialBlocks","updateGameBoard","document","querySelector","classList","add","getBlockAtPosition","x","y","find","block","i","addRandomBlocks","isCellOccupied","some","isBoardFull","showGameOverMessage","randomX","randomY","Math","floor","random","randomValue","textContent","push","value","forEach","cell","directionMap","handleKeyPress","keyEvent","key","moveBlocks","toLowerCase","preventDefault","direction","directionVector","sort","a","b","length","currentBlock","nextBlock","splice","canMove","canMoveDirection","nextX","nextY","console","log","handleUserInput","type","addEventListener"],"mappings":"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","file":"main.ac01ef33.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst game = {\n  boardSize: 4,\n  blocks: [],\n  score: 0,\n};\n\nfunction startGame() {\n  game.blocks = [];\n  game.score = 0;\n  generateInitialBlocks();\n  updateGameBoard();\n  document.querySelector('.message-container').classList.add('hidden');\n}\n\nconst getBlockAtPosition = (x, y) =>\n  game.blocks.find(block => block.x === x && block.y === y);\n\nfunction generateInitialBlocks() {\n  for (let i = 0; i < 2; i++) {\n    addRandomBlocks();\n  }\n}\n\nfunction addRandomBlocks() {\n  const isCellOccupied = (x, y) =>\n    game.blocks.some(block => block.x === x && block.y === y);\n\n  function isBoardFull() {\n    for (let x = 0; x < game.boardSize; x++) {\n      for (let y = 0; y < game.boardSize; y++) {\n        if (!isCellOccupied(x, y)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  if (isBoardFull()) {\n    showGameOverMessage();\n\n    return;\n  }\n\n  let randomX, randomY;\n\n  do {\n    randomX = Math.floor(Math.random() * game.boardSize);\n    randomY = Math.floor(Math.random() * game.boardSize);\n  } while (isCellOccupied(randomX, randomY));\n\n  const randomValue = Math.random() < 0.9 ? 2 : 4;\n\n  const cell = document.querySelector(\n    `.field-cell[data-x=\"${randomX}\"][data-y=\"${randomY}\"]`\n  );\n\n  cell.textContent = randomValue;\n\n  game.blocks.push({\n    x: randomX,\n    y: randomY,\n    value: randomValue,\n  });\n}\n\nfunction updateGameBoard() {\n  game.blocks.forEach(block => {\n    const cell = document.querySelector(\n      `.field-cell[data-x=\"${block.x}\"][data-y=\"${block.y}\"]`\n    );\n\n    if (cell) {\n      cell.textContent = block.value;\n    }\n  });\n\n  document.querySelector('.game-score').textContent = game.score;\n}\n\nconst directionMap = {\n  'up': {\n    x: 0, y: -1,\n  },\n  'down': {\n    x: 0, y: 1,\n  },\n  'left': {\n    x: -1, y: 0,\n  },\n  'right': {\n    x: 1, y: 0,\n  },\n};\n\nfunction handleKeyPress(keyEvent) {\n  if (\n    keyEvent.key === 'ArrowUp'\n    || keyEvent.key === 'ArrowDown'\n    || keyEvent.key === 'ArrowLeft'\n    || keyEvent.key === 'ArrowRight'\n  ) {\n    moveBlocks(keyEvent.key.toLowerCase());\n    keyEvent.preventDefault();\n  }\n}\n\nfunction moveBlocks(direction) {\n  const directionVector = directionMap[direction];\n\n  game.blocks.sort((a, b) =>\n    a[direction === 'up' || direction === 'down' ? 'y' : 'x']\n    - b[direction === 'up' || direction === 'down' ? 'y' : 'x']);\n\n  for (let i = 0; i < game.blocks.length - 1; i++) {\n    const currentBlock = game.blocks[i];\n    const nextBlock = game.blocks[i + 1];\n\n    if (\n      currentBlock.x === nextBlock.x\n      && currentBlock.y === nextBlock.y\n      && currentBlock.value === nextBlock.value\n    ) {\n      currentBlock.value *= 2;\n      game.score += currentBlock.value;\n      game.blocks.splice(i + 1, 1);\n    }\n  }\n\n  game.blocks.forEach(block => {\n    if (block && directionVector) {\n      block.x += directionVector.x;\n      block.y += directionVector.y;\n\n      const cell = document.querySelector(\n        `.field-cell[data-x=\"${block.x}\"][data-y=\"${block.y}\"]`\n      );\n\n      if (cell) {\n        cell.textContent = block.value;\n      }\n    }\n  });\n\n  updateGameBoard();\n\n  if (!canMove()) {\n    showGameOverMessage();\n  }\n}\n\nfunction canMove() {\n  return [\n    'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].some(canMoveDirection);\n}\n\nfunction canMoveDirection(direction) {\n  const directionVector = directionMap[direction];\n\n  if (!directionVector) {\n    return false; // Додайте перевірку наявності directionVector\n  }\n\n  for (let x = 0; x < game.boardSize; x++) {\n    for (let y = 0; y < game.boardSize; y++) {\n      const currentBlock = getBlockAtPosition(x, y);\n\n      if (currentBlock) {\n        const nextX = x + directionVector.x;\n        const nextY = y + directionVector.y;\n\n        if (\n          nextX >= 0\n          && nextX < game.boardSize\n          && nextY >= 0\n          && nextY < game.boardSize\n        ) {\n          const nextBlock = getBlockAtPosition(nextX, nextY);\n\n          if (\n            !nextBlock\n            || (nextBlock && nextBlock.value === currentBlock.value)\n          ) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction showGameOverMessage() {\n  console.log('Game Over!');\n}\n\nfunction handleUserInput(keyEvent) {\n  if (keyEvent.type === 'keydown') {\n    if (keyEvent.key === 'Enter') {\n      startGame();\n    } else {\n      handleKeyPress(keyEvent);\n    }\n  }\n}\n\ndocument.addEventListener('keydown', handleUserInput);\ndocument.querySelector('.button.start').addEventListener('click', startGame);\n\ngenerateInitialBlocks();\nupdateGameBoard();\n"]}